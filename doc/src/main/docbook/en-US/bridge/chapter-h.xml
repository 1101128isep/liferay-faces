<?xml version="1.0" encoding="UTF-8"?>
<chapter xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
	xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:ns="http://docbook.org/ns/docbook">
	<title>ICEfaces 3 Portlet Development</title>
	<sect1 revision="1">
		<title>Overview</title>
		<para>ICEfaces 3 is an open source extension to JSF that enables developers with Java EE application skills to
			build Ajax-powered Rich Internet Applications (RIA) without writing any JavaScript code. The product
			contains a robust suite of Ajax-enabled JSF UI components, and also supports a broad array of Java
			application servers, IDEs, third party components, and JavaScript effect libraries. The project home page
			can be found at <ns:link xlink:href="http://www.icesoft.org/projects/ICEfaces"
				>http://www.icesoft.org/projects/ICEfaces</ns:link>.</para>
		<para>ICEfaces 3 introduces automatic-Ajax into JSF 2 applications, which makes it a particularly good choice
			for developing RIA portlets. Consider a portal page that contains two portlets: Portlet A and Portlet B.
			When submitting a form in Portlet A, an HTTP POST takes place and the entire portal page is refreshed. This
			can result in a disruptive end-user experience if the user had entered data in Portlet B prior to submitting
			Portlet A. ICEfaces 3 allows you to combat this disruptive experience with RIA features in your
			portlets.</para>
	</sect1>
	<sect1 revision="1">
		<title>ICEfaces Direct-To-DOM RenderKit</title>
		<para>Rather than writing markup directly to the response, ICEfaces 3 components render themselves into a
			server-side Document Object Model (DOM) via the Direct-to-DOM (D2D) RenderKit. When a JSF view is requested
			for the first time, the markup inside the server-side DOM is delivered to the browser as part of the
			response. As the user interacts with the UI of the portlet, ICEfaces transparently submits user actions via
			Ajax and executes the JSF lifecycle. When the RENDER_RESPONSE phase of the JSF lifecycle completes, ICEfaces
			will compare the previous server-side DOM with the latest server-side DOM and send the incremental page
			updates back to the browser via the ICEfaces Ajax Bridge.</para>
		<para>This approach is sometimes referred to as “dom-diffing” and provides the following benefits for
			portlets:</para>
		<itemizedlist>
			<listitem>
				<simpara>The end user is immediately presented with form validation failures for visited fields when
					pressing the tab key</simpara>
			</listitem>
			<listitem>
				<simpara>When a navigation-rule fires and a new JSF view is to be rendered, ICEfaces will render the new
					JSF view by performing a complete update of the markup contained in the affected portlet, rather
					than causing the entire browser page to reload</simpara>
			</listitem>
			<listitem>
				<simpara>ICEfaces portlets will not disturb other portlets on the same portal page</simpara>
			</listitem>
		</itemizedlist>
	</sect1>
	<sect1 revision="1" xml:id="ajaxpushipc">
		<title>ICEfaces Ajax Push and Inter-Portlet Communication</title>
		<para>While the Portlet 2.0 standard defines techniques for performing inter-portlet communication (IPC), they
			cause either an HTTP GET or HTTP POST which results in a full page reload and a disruptive end-user
			experience. ICEfaces provides a natural way for portlets to perform IPC via ICEfaces Ajax Push.</para>
		<para>ICEfaces pioneered Ajax Push, which is sometimes referred to as Reverse Ajax or Comet. The technology
			provides the ability for server-initiated events to cause incremental page updates to be sent to the
			browser. With ICEfaces Ajax Push, developers can create collaborative and dynamic enterprise applications
			like never before.</para>
		<para>Because the mechanism facilitates asynchronous updates from the server to the client, interaction with one
			ICEfaces portlet can trigger communication with other ICEfaces portlets by changing values in JSF backing
			and model managed-beans. This mechanism is not restricted to IPC among portlets on the same portal page in a
			single browser, but can include updating other browsers that are interacting with the same portal page. The
			result is not just inter-portlet communication, but inter-portlet, inter-browser communication.
			Additionally, ICEfaces Ajax Push solves the potentially disruptive end-user experience associated with the
			Portlet 2.0 standard IPC techniques.</para>
		<figure>
			<title>Illustration of IPC with ICEfaces Ajax Push</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/ipc-ajax-push.png" width="400px"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>The following is a list of guidelines for achieving IPC with ICEfaces Ajax Push</para>
		<itemizedlist>
			<listitem>
				<simpara>Package the portlets that need to communicate in the same WAR.</simpara>
			</listitem>
			<listitem>
				<simpara>In order to share data between portlets, use application-scoped beans or request-scoped beans
					that store data in PortletSession.APPLICATION_SCOPE.</simpara>
			</listitem>
			<listitem>
				<simpara>Use the ICEfaces Ajax Push SessionRenderer to trigger client updates when the shared data
					changes.</simpara>
			</listitem>
		</itemizedlist>
		<example>
			<title>Chat Portlet Managed-Bean</title>
			<programlisting>
/*
* This is a file named ChatRoomManagedBean.java
* that is registered as a JSF managed-bean in
* application scope. It maintains a chat log
* that participates in ICEfaces Ajax Push using
* the SessionRenderer.
*/
@ManagedBean(name = "chatRoomManagedBean")
@RequestScoped
public class ChatRoomManagedBean {

	private String messageText;

	private List&lt;String&gt; messages = new ArrayList&lt;String&gt;();
	
	private static final String
		AJAX_PUSH_GROUP_NAME = "chatRoom";
	
	public ChatRoomsModel() {
		SessionRenderer.addCurrentSession(
			AJAX_PUSH_GROUP_NAME);
	}

	@PreDestroy
	public void preDestroy() throws Exception {
		SessionRenderer.removeCurrentSession(
			AJAX_PUSH_GROUP_NAME);
	}
	
	public void addMessage(ActionEvent actionEvent) {
		messages.add(messageText);
		SessionRenderer.render(AJAX_PUSH_GROUP_NAME);
	}
	
	public List&lt;String&gt; getMessages() {
		return messages;
	}
		
	public String getMessageText() {
		return messageText;
	}
		
	public void setMessageText(String messageText) {
		this.messageText = messageText;
	}
}
</programlisting>
		</example>
		<example>
			<title>Chat Portlet Facelet View</title>
			<programlisting>
&lt;!-- This is a Facelet view named chatRoom.xhtml --&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;f:view xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"&gt;
	&lt;h:head /&gt;
	&lt;h:body styleClass="example-icefaces-portlet"&gt;
		&lt;h:form&gt;
			&lt;h:dataTable
				value=”#{chatRoomManagedBean.messages}”
				var=”message”&gt;
				&lt;h:column&gt;
					&lt;h:outputText value=”#{message}” /&gt;
				&lt;/h:column&gt;
			&lt;/h:dataTable&gt;
			&lt;h:inputText
				value=”#{chatRoomManagedBean.messageText}” /&gt;
			&lt;h:commandButton
				actionListener=”#{chatRoomManagedBean.addMessage}” /&gt;
		&lt;/h:form&gt;
	&lt;/h:body&gt;
&lt;/f:view&gt;
</programlisting>
		</example>
		<note>
			<title>Demo Portlets at liferay.com</title>
			<para>The liferay.com website hosts a variety open source demonstration portlets that focus on ICEfaces
				portlets for Liferay Portal. Specifically, there is a portlet featuring an ICEfaces chat room that
				integrates with Liferay Portal’s online users. When a user signs-in to Liferay Portal, a
				server-initiated event triggers ICEfaces Ajax Push so that other users that are online become aware of
				online presence. Additionally, when the user clicks on a “Chat” icon, ICEfaces Ajax Push is used for IPC
				to begin a new chat room in a Chat Portlet. For more information, visit : <ns:link
					xlink:href="http://www.liferay.com/community/liferay-projects/liferay-faces/demos"
					>http://www.liferay.com/community/liferay-projects/liferay-faces/demos</ns:link></para>
		</note>
	</sect1>
	<sect1 revision="1">
		<title>ICEfaces Themes and Portal Themes</title>
		<para>The ICEfaces Component Suite fully supports consistent component styling via a set of predefined CSS style
			classes and associated images. Changing the component styles for a web application developed with the
			ICEfaces Component Suite is as simple as changing the style sheet used. ICEfaces ships with a set of
			predefined style sheets are available to be used as-is, or customized to meet the specific requirements of
			the application. There are five predefined ICEfaces style sheets included, two of which are designed to be
			used inside a portlet container:</para>
		<itemizedlist>
			<listitem>
				<simpara>rime.css</simpara>
			</listitem>
			<listitem>
				<simpara>rime-portlet.css</simpara>
			</listitem>
			<listitem>
				<simpara>xp.css</simpara>
			</listitem>
			<listitem>
				<simpara>xp-portlet.css</simpara>
			</listitem>
			<listitem>
				<simpara>royale.css</simpara>
			</listitem>
		</itemizedlist>
		<example>
			<title>Specifying the portlet-compatible version of the ICEfaces "XP" theme</title>
			<programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;f:view xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"&gt;
	&lt;h:head&gt;
	&lt;link href="#{request.contextPath}/xmlhttp/css/xp/xp-portlet.css" rel="stylesheet"
		type="text/css" /&gt;
	&lt;/h:head&gt;
	&lt;h:body styleClass="example-icefaces-portlet"&gt;
		&lt;h:form&gt;
			...
		&lt;/h:form&gt;
	&lt;/h:body&gt;
&lt;/f:view&gt;
		</programlisting>
		</example>
		<para>The Portlet 1.0 and 2.0 standards document a set of common CSS class names that should be applied to
			specific page elements in order to integrate with the portlet container’s theme mechanism. When running in a
			portlet container, ICEfaces 1.8 compatibility components will automatically render the following subset of
			Portlet 1.0 CSS class names where appropriate</para>
		<itemizedlist>
			<listitem>
				<simpara>portlet-form-button</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-form-field</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-form-input-field</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-form-label</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-menu</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-menu-cascade-item</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-menu-item</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-menu-item-hover</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-section-alternate</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-section-body</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-section-footer</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-section-header</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-msg-alert</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-msg-error</simpara>
			</listitem>
			<listitem>
				<simpara>portlet-msg-info</simpara>
			</listitem>
		</itemizedlist>
		<para>To disable this feature, developers can specify the com.icesoft.faces.portlet.renderStyles context
			parameter in the WEB-INF/web.xml configuration file and set its value to false.</para>
		<example>
			<title>Disabling automatic rendering of Portlet 1.0 / 2.0 standard CSS class names in the WEB-INF/web.xml
				configuration file</title>
			<programlisting>
&lt;context-param&gt;
	&lt;param-name&gt;
		com.icesoft.faces.portlet.renderStyles
	&lt;/param-name&gt;
	&lt;param-value&gt;false&lt;/param-value&gt;
&lt;/context-param&gt;
		</programlisting>
		</example>
	</sect1>
	<sect1 revision="1">
		<title>ICEfaces Themes and Liferay Themes</title>
		<para>Liferay Portal supports styling for Portlet 1.0 and 2.0 standard CSS class names as well as a set of
			vendor-specific CSS class names within the context of a Liferay theme. However, since Liferay themes do not
			contain styling for the ICEfaces Component Suite, it is necessary to select an ICEfaces style sheet that is
			visually compatible with the Liferay theme.</para>
		<para>On some occasions, it becomes necessary to override some of the styling in a Liferay theme in order to
			make it more visually compatible with an ICEfaces portlet. For example, Liferay themes typically render
			spans of class portlet-msg-error with a margin that has too much space to be placed alongside a rendered
			ice:inputText component tag.</para>
		<example>
			<title>Overriding styling in a Liferay theme from within a Facelet view so that rendered output from
				ice:messages and ice:message have a more narrow margin</title>
			<programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;f:view xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"&gt;
	&lt;h:head&gt;
	&lt;link href="#{request.contextPath}/xmlhttp/css/xp/xp-portlet.css" rel="stylesheet"
		type="text/css" /&gt;
	&lt;link href="#{request.contextPath}/css/liferay-theme-override.css" rel="stylesheet"
		type="text/css" /&gt;
	&lt;/h:head&gt;
	&lt;h:body styleClass="example-icefaces-portlet"&gt;
		&lt;h:form&gt;
			&lt;h:messages /&gt;
			...
		&lt;/h:form&gt;
	&lt;/h:body&gt;
&lt;/f:view&gt;

/*
 * This is a separate file named liferay-theme-override.css
 */
.example-icefaces-portlet .portlet-msg-error {
	margin: 1px 0px 0px 0px;
	padding: 1px 5px 1px 24px;
}
		</programlisting>
		</example>
	</sect1>
</chapter>

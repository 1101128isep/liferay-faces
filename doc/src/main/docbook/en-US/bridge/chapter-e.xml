<?xml version="1.0" encoding="UTF-8"?>
<chapter xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
	xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:ns="http://docbook.org/ns/docbook">
	<title>JSF Portlet Development</title>
	<sect1 revision="1">
		<title>Overview</title>
		<para>The main goal of JSF portlet bridges is to make the JSF portlet development experience as close as
			possible to JSF webapp development. Consequently, many JSF webapps can be easily migrated to a portlet
			container using such a bridge.</para>
	</sect1>
	<sect1>
		<title>Liferay Faces Bridge</title>
		<para>In order to use JSF2 in a portlet, developers must specify
				<literal>javax.portlet.faces.GenericFacesPortlet</literal> in the
				<literal>&lt;portlet-class&gt;</literal> element of the <ns:literal>WEB-INF/portlet.xml</ns:literal>
			descriptor. </para>
		<example>
			<title>Specifying Liferay Faces Bridge in the WEB-INF/portlet.xml configuration file, as well as default
				Facelet views that are to be rendered for VIEW mode, EDIT mode, and HELP mode</title>
			<programlisting>
&lt;portlet-app&gt;
	&lt;portlet&gt;
		&lt;portlet-name&gt;my_portlet&lt;/portlet-name&gt;
		&lt;display-name&gt;My Portlet&lt;/display-name&gt;
		&lt;portlet-class&gt;
			javax.portlet.faces.GenericFacesPortlet
		&lt;/portlet-class&gt;
		&lt;init-param&gt;
			&lt;name&gt;javax.portlet.faces.defaultViewId.view&lt;/name&gt;
			&lt;value&gt;/xhtml/applicantForm.xhtml&lt;/value&gt;
		&lt;/init-param&gt;
		&lt;init-param&gt;
			&lt;name&gt;javax.portlet.faces.defaultViewId.edit&lt;/name&gt;
			&lt;value&gt;/xhtml/edit.xhtml&lt;/value&gt;
		&lt;/init-param&gt;
		&lt;init-param&gt;
			&lt;name&gt;javax.portlet.faces.defaultViewId.help&lt;/name&gt;
			&lt;value&gt;/xhtml/help.xhtml&lt;/value&gt;
		&lt;/init-param&gt;
		&lt;supports&gt;
			&lt;mime-type&gt;text/html&lt;/mime-type&gt;
			&lt;portlet-mode&gt;view&lt;/portlet-mode&gt;
			&lt;portlet-mode&gt;edit&lt;/portlet-mode&gt;
			&lt;portlet-mode&gt;help&lt;/portlet-mode&gt;
		&lt;/supports&gt;
		...
	&lt;/portlet&gt;
&lt;/portlet-app&gt;
		</programlisting>
		</example>
	</sect1>
	<sect1 revision="1" xml:id="portletpreferences-and-jsf">
		<title>JSF and PortletPreferences</title>
		<para>JSF portlet developers often have the requirement to provide the end-user with the ability to personalize
			the portlet in some way. To meet this requirement, the Portlet 2.0 specification provides the ability to
			define portlet preferences for each portlet. Preference names and default values can be defined in the
				<ns:literal>WEB-INF/portlet.xml</ns:literal> descriptor. Portal end-users start out interacting with the
			portlet user interface in portlet <ns:literal>VIEW</ns:literal> mode but switch to portlet
				<ns:literal>EDIT</ns:literal> mode in order to select custom preference values.</para>
		<example>
			<title>Portlet Preferences in WEB-INF/portlet.xml</title>
			<programlisting>
&lt;portlet-preferences&gt;
	&lt;preference&gt;
		&lt;name&gt;datePattern&lt;/name&gt;
		&lt;value&gt;MM/dd/yyyy&lt;/value&gt;
	&lt;/preference&gt;
&lt;/portlet-preferences&gt;</programlisting>
		</example>
		<para>Additionally, Portlet 2.0 provides the ability to specify support for <ns:literal>EDIT</ns:literal> mode
			in the <ns:literal>WEB-INF/portlet.xml</ns:literal> descriptor. </para>
		<example>
			<title>Enabling Support for Portlet EDIT Mode in WEB-INF/portlet.xml</title>
			<programlisting>
&lt;supports&gt;
	&lt;mime-type&gt;text/html&lt;/mime-type&gt;
	&lt;portlet-mode&gt;view&lt;/portlet-mode&gt;
	&lt;portlet-mode&gt;edit&lt;/portlet-mode&gt;
&lt;/supports&gt;</programlisting>
		</example>
		<para>However, just because support portlet <ns:literal>EDIT</ns:literal> mode has been specified, it doesn't
			mean that the portlet container knows which JSF view should be rendered when the user enters portlet portlet
				<ns:literal>EDIT</ns:literal> mode. JSF portlet developers must specify the Facelet view that is to be
			displayed for each supported portlet mode.</para>
		<example>
			<title>Specifying a Facelet View for EDIT mode with Liferay Faces Bridge</title>
			<programlisting>
&lt;init-param&gt;
	&lt;name&gt;javax.portlet.faces.defaultViewId.edit&lt;/name&gt;
	&lt;value&gt;/edit.xhtml&lt;/value&gt;
&lt;/init-param&gt;</programlisting>
		</example>
		<para>Facelet views that are designed to be used in portlet <ns:literal>EDIT</ns:literal> mode are typically
			forms that contain JSF component tags that enable the portlet end-user to select custom preference values
			that override the default values specified in the <ns:literal>WEB-INF/portlet.xml</ns:literal> descriptor.
			JSR 329 bridge implementations are required to provide an EL resolver that introduces the
				<ns:code>mutablePortletPreferencesValues</ns:code> variable into the EL, which is a mutable
				<ns:code>java.util.Map</ns:code> that provides read/write access to each portlet preference. By
			utilizing the JSR 329 <ns:code>mutablePortletPreferencesValues</ns:code> variable within an EL
				<ns:code>ValueExpression</ns:code>, portlet developers can declaratively bind the Facelet view to the
			portlet preference model data. In order to save the preferences, a backing bean must call the <link
				xlink:href="http://portals.apache.org/pluto/portlet-2.0-apidocs/javax/portlet/PortletPreferences.html"
				>PortletPreferences.store()</link> method.</para>
		<example>
			<title>EDIT Mode Facelet XHTML</title>
			<programlisting>
&lt;!--
This is a file named edit.xhtml that can be used for portlet EDIT
mode. It utilizes the JSR 329 mutablePortletPreferencesValues EL
variable for gaining read/write access to
javax.portlet.PortletPreferences.
-->
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;f:view xmlns:f="http://java.sun.com/jsf/core" xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"&gt;
	&lt;h:head /&gt;
	&lt;h:body&gt;
	&lt;h:form&gt;
		&lt;h:messages globalOnly="true" /&gt;
		&lt;table&gt;
			&lt;tr&gt;
				&lt;td&gt;&lt;h:outputLabel for="datePattern" value="Date Format" /&gt;&lt;/td&gt;
				&lt;td&gt;&lt;h:inputText id="datePattern" value="#{mutablePortletPreferencesValues['datePattern'].value}" /&gt;&lt;/td&gt;
				&lt;td&gt;&lt;h:message for="datePattern" /&gt;&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/table&gt;
		&lt;hr /&gt;
		&lt;h:commandButton actionListener="#{portletPreferencesBackingBean.submit}" value="Submit" /&gt;
	&lt;/h:form&gt;
	&lt;/h:body&gt;
&lt;/f:view&gt;</programlisting>
		</example>
		<example>
			<title>EDIT Mode Backing Bean - Part I</title>
			<programlisting>
/**
 * This is a JSF backing managed-bean that has an action-listener
 * for saving portlet preferences.
 */
@ManagedBean(name = "portletPreferencesBackingBean")
@RequestScoped
public class PortletPreferencesBackingBean {

	public void submit() {

		// The JSR 329 specification defines an EL variable named
		// mutablePortletPreferencesValues that is being used in
		// the portletPreferences.xhtml Facelet composition. This
		// object is of type Map&lt;String, Preference&gt; and is
		// designed to be a model managed-bean (in a sense) that
		// contain preference values. However the only way to
		// access this from a Java class is to evaluate an EL
		// expression (effectively self-injecting) the map into
		// this backing bean.
		FacesContext facesContext = FacesContext.getCurrentInstance();
		ExternalContext externalContext =
			facesContext.getExternalContext();
		String elExpression = "mutablePortletPreferencesValues";
		ELResolver elResolver =
			facesContext.getApplication().getELResolver();
		@SuppressWarnings("unchecked")
		Map&lt;String, Preference&gt; mutablePreferenceMap =
			(Map&lt;String, Preference&gt;) elResolver.getValue(
				facesContext.getELContext(), null, elExpression);

		// Get a list of portlet preference names.
		PortletRequest portletRequest =
			(PortletRequest) externalContext.getRequest();
		PortletPreferences portletPreferences =
			portletRequest.getPreferences();
		Enumeration&lt;String&gt; preferenceNames =
			portletPreferences.getNames();
</programlisting>
		</example>
		<example>
			<title>EDIT Mode Backing Bean - Part II</title>
			<programlisting>
		try {

			// For each portlet preference name:
			while (preferenceNames.hasMoreElements()) {

				// Get the value specified by the user.
				String preferenceName = preferenceNames.nextElement();
				String preferenceValue =
					mutablePreferenceMap.get(preferenceName).getValue();

				// Prepare to save the value.
				if (!portletPreferences.isReadOnly(preferenceName)) {
					portletPreferences.setValue(
						preferenceName, preferenceValue);
				}
			}

			// Save the preference values.
			portletPreferences.store();

			// Switch the portlet mode back to VIEW.
			ActionResponse actionResponse =
				(ActionResponse) externalContext.getResponse();
			actionResponse.setPortletMode(PortletMode.VIEW);

			// Report a successful message back to the user as feedback.
			FacesMessageUtil.addGlobalSuccessInfoMessage(facesContext);
		}
		catch (Exception e) {
			FacesMessageUtil.addGlobalUnexpectedErrorMessage(facesContext);
		}
	}
}
</programlisting>
		</example>
	</sect1>
	<sect1 revision="1">
		<title>JSF ExternalContext and the Portlet API</title>
		<para>Just as JSF web application developers rely on ExternalContext in order to get access to the Servlet API,
			JSF portlet developers also rely on ExternalContext in order to get access to the Portlet API.</para>
		<sect2>
			<title>Getting the PortletRequest and PortletResponse Objects</title>
			<para>The two most common tasks that JSF portlet developers need to perform is to obtain an instance of the
				javax.portlet.PortletRequest or javax.portlet.PortletResponse objects.</para>
			<example>
				<title>Getting the PortletRequest and PortletResponse objects from within a JSF backing managed-bean
					action method</title>
				<programlisting>
public class BackingBean {

	public void submit() {
		FacesContext facesContext =
			FacesContext.getCurrentInstance();

		ExternalContext externalContext =
			facesContext.getExternalContext();

		PortletRequest portletRequest =
			(PortletRequest) externalContext.getRequest();

		PortletResponse portletResponse =
			(PortletResponse) externalContext.getResponse();
	}
}
		</programlisting>
			</example>
			<note>
				<title>Liferay Faces Portal Project</title>
				<para>For Liferay portlet developers, Liferay Faces Portal project features the LiferayFacesContext
					singleton which contains convenience methods like liferayFacesContext.getPortletRequest() and
					liferayFacesContext.getPortletResponse().</para>
			</note>
		</sect2>
	</sect1>
	<sect1 revision="1">
		<title>JSF and Inter-Portlet Communication</title>
		<para>Liferay Faces Bridge supports Portlet 2.0 IPC using the JSR 329 approach for supporting Portlet 2.0 Events
			and also Portlet 2.0 Public Render Parameters. It could be argued that the Portlet 2.0 approaches for IPC
			have a common drawback in that they can lead to a potentially disruptive end-user experience. This is
			because they cause either an HTTP GET or HTTP POST which results in a full page refresh. Technologies such
			as ICEfaces Ajax Push can be used to solve this problem. Refer to the <link xlink:href="#ajaxpushipc">Ajax
				Push IPC</link> section of this document for more details.</para>
		<note>
			<title>Demo Portlets at liferay.com</title>
			<para>Visit <link xlink:href="http://www.liferay.com/community/liferay-projects/liferay-faces/demos"
					>http://www.liferay.com/community/liferay-projects/liferay-faces/demos</link> for demo portlets that
				demonstrate how to use each of these various approaches to IPC.</para>
		</note>
		<sect2>
			<title>Portlet 2.0 Public Render Parameters</title>
			<para>As discussed in <link xlink:href="#portlet2ipc">Chapter 1</link>, the Public Render Parameters
				technique provides a way for portlets to share data by setting public/shared parameter names in a URL
				controlled by the portal. While the benefit of this approach is that it is relatively easy to implement,
				the drawback is that only small amounts of data can be shared. Typically the kind of data that is shared
				is simply the value of a database primary key. As required by the Portlet 2.0 standard, Public Render
				Parameters must be declared in the WEB-INF/portlet.xml descriptor.</para>
			<example>
				<title>Specifying Supported Public Render Parameters in the WEB-INF/portlet.xml descriptor</title>
				<programlisting>&lt;portlet&gt;
	&lt;portlet-name&gt;customersPortlet&lt;/portlet-name&gt;
	<emphasis role="italic">...</emphasis>
	&lt;supported-public-render-parameter&gt;selectedCustomerId&lt;/supported-public-render-parameter&gt;
&lt;/portlet&gt;
&lt;portlet&gt;
	&lt;portlet-name&gt;bookingsPortlet&lt;/portlet-name&gt;
	<emphasis role="italic">...</emphasis>
	&lt;supported-public-render-parameter&gt;selectedCustomerId&lt;/supported-public-render-parameter&gt;
&lt;/portlet&gt;
&lt;public-render-parameter&gt;
	&lt;identifier&gt;selectedCustomerId&lt;/identifier&gt;
	&lt;qname xmlns:x="http://liferay.com/pub-render-params"&gt;x:selectedCustomerId&lt;/qname&gt;
&lt;/public-render-parameter&gt;</programlisting>
			</example>
			<para>The JSR 329 standard defines a mechanism by which developers can use Portlet 2.0 Public Render
				Parameters for IPC in a way that is more natural to JSF development. Section 5.3.2 requires the bridge
				to inject the public render parameters into the Model concern of the MVC design pattern (as in JSF model
				managed-beans) after RESTORE_VIEW phase completes. This is accomplished by evaluating the EL expressions
				found in the &lt;model-el>...&lt;/model-el> section of the WEB-INF/faces-config.xml descriptor.</para>
			<example>
				<title>Specifying Public Render Parameters in the WEB-INF/faces-config.xml descriptor</title>
				<programlisting>&lt;faces-config>
	&lt;application>
		&lt;application-extension&gt;
			&lt;bridge:public-parameter-mappings&gt;
				&lt;bridge:public-parameter-mapping&gt;
					&lt;parameter&gt;selectedCustomerId&lt;/parameter&gt;
					&lt;model-el&gt;#{customersPortlet:customersModelBean.selectedCustomerId}&lt;/model-el&gt;
					&lt;model-el&gt;#{bookingsPortlet:bookingsModelBean.selectedCustomerId}&lt;/model-el&gt;
				&lt;/bridge:public-parameter-mapping&gt;
			&lt;/bridge:public-parameter-mappings&gt;
		&lt;/application-extension&gt;
	&lt;/application&gt;
&lt;/faces-config&gt;</programlisting>
			</example>
			<para>Section 5.3.2 of the JSR 329 standard also requires that if a bridgePublicRenderParameterHandler has
				been registered in the WEB-INF/portlet.xml descriptor, then the handler must be invoked so that it can
				perform any processing that might be necessary.</para>
			<example>
				<title>Specifying a bridgePublicRenderParameterHandler in the WEB-INF/portlet.xml descriptor</title>
				<programlisting>&lt;!-- Optional bridgePublicRenderParameterHandler -->
&lt;init-param&gt;
	&lt;name&gt;javax.portlet.faces.bridgePublicRenderParameterHandler&lt;/name&gt;
	&lt;value&gt;com.liferay.faces.example.handler.CustomerSelectedHandler&lt;/value&gt;
&lt;/init-param&gt;</programlisting>
			</example>
			<example>
				<title>bridgePublicRenderParameterHandler Java Code</title>
				<programlisting>package com.liferay.faces.example.handler;

import javax.faces.context.FacesContext;

import com.liferay.faces.bridge.BridgePublicRenderParameterHandler;

public class CustomerSelectedHandler implements BridgePublicRenderParameterHandler {

	public void processUpdates(FacesContext facesContext) {
		// Here is where you would perform any necessary processing of public render parameters
	}

}</programlisting>
			</example>
		</sect2>
		<sect2>
			<title>Portlet 2.0 Events</title>
			<para>As discussed in <link xlink:href="#portlet2ipc">Chapter 1</link>, the Server-Side Events technique
				provides a way for portlets to share data using an event-listener design. When using this form of IPC,
				the portlet container acts as broker and distributes events and payload (data) to portlets. One
				requirement of this approach is that the payload must implement the java.io.Serializable interface since
				it might be sent to a portlet in another WAR running in a different classloader. As required by the
				Portlet 2.0 standard, Events must be declared in the WEB-INF/portlet.xml descriptor.</para>
			<example>
				<title>Specifying Supported Events in the WEB-INF/portlet.xml descriptor</title>
				<programlisting>&lt;portlet&gt;
	&lt;portlet-name&gt;customersPortlet&lt;/portlet-name&gt;
	<emphasis role="italic">...</emphasis>
	&lt;supported-processing-event&gt;
		&lt;qname xmlns:x="http://liferay.com/events"&gt;x:ipc.customerEdited&lt;/qname&gt;
	&lt;/supported-processing-event&gt;
	&lt;supported-publishing-event&gt;
		&lt;qname xmlns:x="http://liferay.com/events"&gt;x:ipc.customerSelected&lt;/qname&gt;
	&lt;/supported-publishing-event&gt;
&lt;/portlet&gt;
&lt;portlet&gt;
	&lt;portlet-name&gt;bookingsPortlet&lt;/portlet-name&gt;
	<emphasis role="italic">...</emphasis>
	&lt;supported-processing-event&gt;
		&lt;qname xmlns:x="http://liferay.com/events"&gt;x:ipc.customerSelected&lt;/qname&gt;
	&lt;/supported-processing-event&gt;
	&lt;supported-publishing-event&gt;
		&lt;qname xmlns:x="http://liferay.com/events"&gt;x:ipc.customerEdited&lt;/qname&gt;
	&lt;/supported-publishing-event&gt;
&lt;/portlet&gt;
&lt;event-definition&gt;
	&lt;qname xmlns:x="http://liferay.com/events"&gt;x:ipc.customerEdited&lt;/qname&gt;
	&lt;value-type&gt;com.liferay.faces.example.dto.Customer&lt;/value-type&gt;
&lt;/event-definition&gt;
&lt;event-definition&gt;
	&lt;qname xmlns:x="http://liferay.com/events"&gt;x:ipc.customerSelected&lt;/qname&gt;
	&lt;value-type&gt;com.liferay.faces.example.dto.Customer&lt;/value-type&gt;
&lt;/event-definition&gt;</programlisting>
			</example>
			<para>Section 5.2.5 of the JSR 329 standard requires that if a BridgeEventHandler has been registered in the
				WEB-INF/portlet.xml descriptor, then the handler must be invoked so that it can perform any processing
				that might be necessary.</para>
			<example>
				<title>Specifying a BridgeEventHandler in the WEB-INF/portlet.xml descriptor</title>
				<programlisting>&lt;!-- Optional bridgeEventHandler -->
&lt;init-param&gt;
	&lt;name&gt;javax.portlet.faces.bridgeEventHandler&lt;/name&gt;
	&lt;value&gt;com.liferay.faces.example.event.CustomerEditedEventHandler&lt;/value&gt;
&lt;/init-param&gt;</programlisting>
			</example>
			<example>
				<title>BridgeEventHandler Java Code</title>
				<programlisting>package com.liferay.faces.example.event;

import javax.el.ELContext;
import javax.el.ValueExpression;
import javax.faces.context.FacesContext;
import javax.portlet.Event;

import com.liferay.faces.bridge.BridgeEventHandler;
import com.liferay.faces.bridge.event.EventNavigationResult;

public class CustomerEditedEventHandler implements BridgeEventHandler {

	public EventNavigationResult handleEvent(FacesContext facesContext, Event event) {
		EventNavigationResult eventNavigationResult = null;
		String eventQName = event.getQName().toString();

		if (eventQName.equals("{http://liferay.com/events}ipc.customerEdited")) {
			Customer customer = (Customer) event.getValue();
			getCustomerService(facesContext).save(customer);
			System.err.println("Received event ipc.customerEdited");
			System.err.println("customerId=" + customer.getCustomerId());
		}

		return eventNavigationResult;
	}
}</programlisting>
			</example>
		</sect2>
		<sect2>
			<title>Portlet 2.0 Shared Session Scope</title>
			<para>Perhaps the most natural approach for a JSF developer to try for IPC is to specify session scope on a
				JSF managed-bean. Surprisingly, this approach doesn’t work. To understand the reason why, it is
				necessary to discuss the fact that the Portlet 1.0 and 2.0 standards make a distinction between two
				kinds of session scopes: javax.portlet.PortletSession.APPLICATION_SCOPE and
				javax.portlet.PortletSession.PORTLET_SCOPE. The former can be used for sharing data between portlets
				packaged in the same WAR, but the latter cannot. The reason why JSF session scope can’t be used to share
				data between portlets is because all JSF portlet bridges use PortletSession.PORTLET_SCOPE.</para>
			<para>In order to share data with PortletSession.APPLICATION_SCOPE, the JSF portlet developer can place a
				JSF model managed-bean in request scope and use the getter/setter as a layer of abstraction.</para>
			<example>
				<title>Shared Scope Model Managed-Bean - Part I</title>
				<programlisting>
/**
 * This class is a request-scoped JSF managed-bean that has
 * a getter and setter that serves as a layer of abstraction
 * over PortletSession.APPLICATION_SCOPE
 */
@RequestScoped(name="sharedScopeModelBean")
public class SharedScopeModelBean {

	public static final String
		SHARED_STRING_KEY = “sharedStringKey”;

	public String getSharedString() {
		return PortletSessionUtil.getSharedSessionAttribute(
			SHARED_STRING_KEY);
	}

	public void setSharedString(String value) {
		PortletSessionUtil.setSharedSessionAttribute(
			SHARED_STRING_KEY, value);
	}
}

public class PortletSessionUtil {

	public static Object getSharedSessionAttribute(
		String key) {

		FacesContext facesContext =
			FacesContext.getCurrentInstance();

		ExternalContext externalContext =
			facesContext.getExternalContext();

		PortletSession portletSession =
			(PortletSession) externalContext().getSession(false);

		return portletSession.getAttribute(
			key, PortletSession.APPLICATION_SCOPE);
	}
</programlisting>
			</example>
			<example>
				<title>Shared Scope Model Managed Bean - Part II</title>
				<programlisting>
	public static void setSharedSessionAttribute(
		String key, Object value) {

		FacesContext facesContext =
			FacesContext.getCurrentInstance();

		ExternalContext externalContext =
			facesContext.getExternalContext();

		PortletSession portletSession =
			(PortletSession)externalContext().getSession(false);

		portletSession.setAttribute(
			key, value, PortletSession.APPLICATION_SCOPE);
	}
}</programlisting>
			</example>
		</sect2>
	</sect1>
</chapter>

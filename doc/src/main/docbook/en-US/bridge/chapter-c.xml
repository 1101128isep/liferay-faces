<?xml version="1.0" encoding="UTF-8"?>
<chapter xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
	xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:ns="http://docbook.org/ns/docbook">
	<title>Portlet Bridge Standard</title>
	<sect1 revision="1">
		<title>Overview</title>
		<para>The Portlet 1.0 and JSF 1.0 specifications were formulated during roughly the same timeframe.
			Consequently, the JSF Expert Group (EG) was able to design a framework with portlet compatibility in mind.
			This is evidenced by methods like <ns:link
				xlink:href="http://download.oracle.com/javaee/6/api/javax/faces/context/ExternalContext.html"
				>ExternalContext.getRequest()</ns:link> which returns a value of type <ns:code>Object</ns:code>, rather
			than a value of type <ns:link
				xlink:href="http://download.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html"
				>javax.servlet.http.HttpServletRequest</ns:link>. When running inside a portlet container, the same
			method would return a value of type <ns:link
				xlink:href="http://portals.apache.org/pluto/portlet-2.0-apidocs/javax/portlet/PortletRequest.html"
				>javax.portlet.PortletRequest</ns:link>. Although the JSF API provides a degree of portlet
			compatibility, it is necessary to introduce a bridge between the JSF lifecycle and the Portlet lifecycle in
			order to run JSF applications as portlets.</para>
	</sect1>
	<sect1 revision="1">
		<title>Portlet Bridge 1.0</title>
		<para>Starting in 2004, several different JSF portlet bridge implementations were developed in order to provide
			JSF developers with the ability to deploy their JSF webapps as portlets. In 2006 the JCP formed the Portlet
			Bridge 1.0 (<link xlink:href="http://www.jcp.org/en/jsr/detail?id=301">JSR 301</link>) EG in order to define
			a standard bridge API as well as detailed requirements for bridge implementations. JSR 301 was released in
			2010 and targeted Portlet 1.0 and JSF 1.2. </para>
	</sect1>
	<sect1 revision="1">
		<title>Portlet Bridge 2.0</title>
		<para>When the Portlet 2.0 (<link xlink:href="http://www.jcp.org/en/jsr/detail?id=286">JSR 286</link>) standard
			was released in 2008 it became necessary for the JCP to form the Portlet Bridge 2.0 (<link
				xlink:href="http://www.jcp.org/en/jsr/detail?id=329">JSR 329</link>) EG. JSR 329 was also released in
			2010 and targeted Portlet 2.0 and JSF 1.2. </para>
	</sect1>
	<sect1 revision="1">
		<title>Portlet Bridge 3.0 </title>
		<para>After the <link xlink:href="http://www.jcp.org/en/jsr/detail?id=314">JSR 314</link> EG released JSF 2.0 in
			2009 and JSF 2.1 in 2010, it became evident that a Portlet Bridge 3.0 standard would be beneficial. At the
			time of this writing, the JCP has not formed such an EG. In the meantime, the Liferay has developed
				<emphasis role="bold">Liferay Faces Bridge</emphasis>, which targets Portlet 2.0 and JSF 2.0/2.1.</para>
		<para>Liferay Faces Bridge is an implementation of the JSR 329 Portlet Bridge Standard. It also contains
			innovative features that make it possible to leverage the power of JSF 2 inside a portlet
			application.</para>
	</sect1>
	<sect1 revision="1">
		<title>Portlet Lifecycle and JSF Lifecycle</title>
		<para>JSF portlet bridges are responsible for providing a “bridge” between the portlet lifecycle and the JSF
			lifecycle. For example, when a portal page that contains a JSF portlet is requested via HTTP GET, then the
			RENDER_PHASE of the portlet lifecycle should in turn execute the RESTORE_VIEW and RENDER_RESPONSE phases of
			the JSF lifecycle. Similarly, when the user submits a form contained within a JSF portlet via HTTP POST,
			then the ACTION_PHASE of the portlet lifecycle should execute the complete JSF lifecycle of RESTORE_VIEW,
			APPLY_REQUEST_VALUES, PROCESS_VALIDATIONS, UPDATE_MODEL_VALUES, INVOKE_APPLICATION, and RENDER_RESPONSE.
			Since the portal is in full control of managing URLs, JSF portlet bridges are also responsible for asking
			the portal to generate URLs that are compatible with actions that invoke JSF navigation rules. If a
			different JSF view is to be rendered as a result of a JSF navigation-rule, then the JSF portlet bridge
			simply displays the new JSF view in the same portlet window.</para>
	</sect1>
</chapter>
